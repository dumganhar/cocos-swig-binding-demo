// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated engine source code (the "Software"), a limited,
 worldwide, royalty-free, non-assignable, revocable and non-exclusive license
 to use Cocos Creator solely to develop games on your target platforms. You shall
 not use Cocos Creator software for developing other software or tools that's
 used for developing games. You are not granted to publish, distribute,
 sublicense, and/or sell copies of Cocos Creator.

 The software or tools in this License Agreement are licensed, not sold.
 Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static 
#endif



#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/jsb_my_module_auto.h"
#include "bindings/auto/jsb_another_module_auto.h"


#define my_ns_MyObject_type_get(self_) self_->getType()
#define my_ns_MyObject_type_set(self_, val_) self_->setType(val_)
  

#if USE_MY_FEATURE

se::Class* __jsb_my_ns_MyFeatureObject_class = nullptr;
se::Object* __jsb_my_ns_MyFeatureObject_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_my_ns_MyFeatureObject) 

static bool js_my_ns_MyFeatureObject_foo(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyFeatureObject *arg1 = (my_ns::MyFeatureObject *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<my_ns::MyFeatureObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->foo();
    
    
    return true;
}
SE_BIND_FUNC(js_my_ns_MyFeatureObject_foo) 

// js_ctor
static bool js_new_my_ns_MyFeatureObject(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    my_ns::MyFeatureObject *result;
    result = (my_ns::MyFeatureObject *)new my_ns::MyFeatureObject();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_my_ns_MyFeatureObject, __jsb_my_ns_MyFeatureObject_class, js_delete_my_ns_MyFeatureObject)

static bool js_delete_my_ns_MyFeatureObject(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_my_ns_MyFeatureObject) 

bool js_register_my_ns_MyFeatureObject(se::Object* obj) {
    auto* cls = se::Class::create("MyFeatureObject", obj, nullptr, _SE(js_new_my_ns_MyFeatureObject)); 
    
    
    cls->defineFunction("foo", _SE(js_my_ns_MyFeatureObject_foo)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_my_ns_MyFeatureObject));
    
    
    cls->install();
    JSBClassType::registerClass<my_ns::MyFeatureObject>(cls);
    
    __jsb_my_ns_MyFeatureObject_proto = cls->getProto();
    __jsb_my_ns_MyFeatureObject_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}

#endif // USE_MY_FEATURE

se::Class* __jsb_my_ns_MyObject_class = nullptr;
se::Object* __jsb_my_ns_MyObject_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_my_ns_MyObject) 

static bool js_new_my_ns_MyObject__SWIG_0(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    my_ns::MyObject *result;
    result = (my_ns::MyObject *)new my_ns::MyObject();
    
    
//    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
//    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_my_ns_MyObject__SWIG_1(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_overloaded_ctor
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    int arg1 ;
    bool arg2 ;
    my_ns::MyObject *result;
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1, nullptr);
    SE_PRECONDITION2(ok, false, "new_MyCoolObject,1,SWIGTYPE_int"); 
    // %typemap(in) bool
    ok &= sevalue_to_native(args[1], &arg2);
    SE_PRECONDITION2(ok, false, "new_MyCoolObject,2,SWIGTYPE_bool"); 
    result = (my_ns::MyObject *)new my_ns::MyObject(arg1,arg2);
    
    
//    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
//    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_MyCoolObject(se::State& s) // NOLINT(readability-identifier-naming)
{
    // js_ctor_dispatcher
    size_t argc = s.args().size();
    bool ret = false;
    
    // switch all cases by means of series of if-returns.
    
    // js_ctor_dispatch_case
    if(argc == 0) {
        ret = js_new_my_ns_MyObject__SWIG_0(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    // js_ctor_dispatch_case
    if(argc == 2) {
        ret = js_new_my_ns_MyObject__SWIG_1(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    
    // default:
    SE_REPORT_ERROR("Illegal arguments for construction of MyCoolObject");
    return false;
}
SE_BIND_CTOR(js_new_MyCoolObject, __jsb_my_ns_MyObject_class, js_delete_my_ns_MyObject)

static bool js_delete_my_ns_MyObject(se::State& s)
{
    // js_dtoroverride
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_my_ns_MyObject) 

static bool js_my_ns_MyCoolObject_print(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->print();
    
    
    return true;
}
SE_BIND_FUNC(js_my_ns_MyCoolObject_print) 

static bool js_my_ns_MyCoolObject_coolMethod(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    (arg1)->methodToBeRenamed();
    
    
    return true;
}
SE_BIND_FUNC(js_my_ns_MyCoolObject_coolMethod) 

static bool js_my_ns_MyCoolObject_coolProperty_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->propertyToBeRenamed, nullptr);
    SE_PRECONDITION2(ok, false, "MyCoolObject_coolProperty_set,2,SWIGTYPE_int"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_my_ns_MyCoolObject_coolProperty_set) 

static bool js_my_ns_MyCoolObject_coolProperty_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->propertyToBeRenamed, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_my_ns_MyCoolObject_coolProperty_get) 

static bool js_my_ns_MyCoolObject_publicFloatProperty_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg1->publicFloatProperty, nullptr);
    SE_PRECONDITION2(ok, false, "MyCoolObject_publicFloatProperty_set,2,SWIGTYPE_float"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_my_ns_MyCoolObject_publicFloatProperty_set) 

static bool js_my_ns_MyCoolObject_publicFloatProperty_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    
    // out 1
    ok &= nativevalue_to_se(arg1->publicFloatProperty, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_my_ns_MyCoolObject_publicFloatProperty_get) 

static bool js_my_ns_MyCoolObject_getFeatureObject(se::State& s)
{
    // js_function
#if USE_MY_FEATURE
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    my_ns::MyFeatureObject *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (my_ns::MyFeatureObject *)(arg1)->getFeatureObject();
    // %typemap(out) SWIGTYPE*
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/);
    SE_PRECONDITION2(ok, false, "MyCoolObject_getFeatureObject, Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
#endif // USE_MY_FEATURE
    
    return true;
}
SE_BIND_FUNC(js_my_ns_MyCoolObject_getFeatureObject) 

static bool js_my_ns_MyCoolObject_helloWithAnotherObject(se::State& s)
{
    // js_function
    
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    my_another_ns::MyAnotherObject *arg2 = 0 ;
    my_another_ns::MyAnotherObject temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) SWIGTYPE&
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "MyCoolObject_helloWithAnotherObject,2,SWIGTYPE_p_my_another_ns__MyAnotherObject");
    arg2 = &temp2;
    
    (arg1)->helloWithAnotherObject((my_another_ns::MyAnotherObject const &)*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_my_ns_MyCoolObject_helloWithAnotherObject) 

static bool js_my_ns_MyCoolObject_type_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    int arg2 ;
    
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    // %typemap(in) int, short, long, signed char, float, double
    ok &= sevalue_to_native(args[0], &arg2, nullptr);
    SE_PRECONDITION2(ok, false, "MyCoolObject_type_set,2,SWIGTYPE_int"); 
    my_ns_MyObject_type_set(arg1,arg2);
    
    
    return true;
}
SE_BIND_PROP_SET(js_my_ns_MyCoolObject_type_set) 

static bool js_my_ns_MyCoolObject_type_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    my_ns::MyObject *arg1 = (my_ns::MyObject *) NULL ;
    int result;
    
    arg1 = SE_THIS_OBJECT<my_ns::MyObject>(s);
    SE_PRECONDITION2(arg1, false, "%s: Invalid Native Object", __FUNCTION__); 
    result = (int)my_ns_MyObject_type_get(arg1);
    
    // out 1
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject() /*ctx*/); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_my_ns_MyCoolObject_type_get) 

bool js_register_my_ns_MyObject(se::Object* obj) {
    auto* cls = se::Class::create("MyCoolObject", obj, nullptr, _SE(js_new_MyCoolObject)); 
    
    cls->defineProperty("coolProperty", _SE(js_my_ns_MyCoolObject_coolProperty_get), _SE(js_my_ns_MyCoolObject_coolProperty_set)); 
    cls->defineProperty("publicFloatProperty", _SE(js_my_ns_MyCoolObject_publicFloatProperty_get), _SE(js_my_ns_MyCoolObject_publicFloatProperty_set)); 
    cls->defineProperty("type", _SE(js_my_ns_MyCoolObject_type_get), _SE(js_my_ns_MyCoolObject_type_set)); 
    
    cls->defineFunction("print", _SE(js_my_ns_MyCoolObject_print)); 
    cls->defineFunction("coolMethod", _SE(js_my_ns_MyCoolObject_coolMethod)); 
    cls->defineFunction("getFeatureObject", _SE(js_my_ns_MyCoolObject_getFeatureObject)); 
    cls->defineFunction("helloWithAnotherObject", _SE(js_my_ns_MyCoolObject_helloWithAnotherObject)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_my_ns_MyObject));
    
    
    cls->install();
    JSBClassType::registerClass<my_ns::MyObject>(cls);
    
    __jsb_my_ns_MyObject_proto = cls->getProto();
    __jsb_my_ns_MyObject_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_my_module(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("my_ns", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("my_ns", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
#if USE_MY_FEATURE
    js_register_my_ns_MyFeatureObject(ns); 
#endif // USE_MY_FEATURE
    js_register_my_ns_MyObject(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}

// clang-format on
